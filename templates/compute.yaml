AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bazar Compute Infrastructure - ECS, ALB, NAT Gateway'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Environment name (dev/prod)
  
  VpcId:
    Type: String
    Description: VPC ID from VPC stack
  
  PublicSubnet1Id:
    Type: String
    Description: Public Subnet 1 ID from VPC stack

  PublicSubnet2Id:
    Type: String
    Description: Public Subnet 2 ID from VPC stack
  
  PrivateAppSubnetId:
    Type: String
    Description: Private App Subnet ID from VPC stack
  
  PrivateRouteTableId:
    Type: String
    Description: Private Route Table ID from VPC stack
  

  
  EcsCpu:
    Type: String
    Default: "256"
    Description: CPU units for ECS task
  
  EcsMemory:
    Type: String
    Default: "512"
    Description: Memory (MiB) for ECS task
  
  EcsDesiredCount:
    Type: Number
    Default: 1
    Description: Desired number of ECS tasks
  
  EcsMaxCount:
    Type: Number
    Default: 2
    Description: Maximum number of ECS tasks
  
  SslCertificateArn:
    Type: String
    Description: ARN of SSL certificate for ALB HTTPS listener
    Default: ""
  
  HasSslCertificate:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Whether to create HTTPS listener (requires valid SSL certificate)

  # Environment Variables
  DatabaseUrl:
    Type: String
    Description: Database connection string for the application
    Default: "postgresql://placeholder:placeholder@localhost:5432/placeholder"
  
  SupabaseUrl:
    Type: String
    Description: Supabase project URL
  
  SupabaseKey:
    Type: String
    Description: Supabase anon key
  
  InitDbOnStartup:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Whether to initialize database on startup
  
  InitAuthOnStartup:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Whether to initialize auth on startup

Conditions:
  HasSslCertificate: !Equals [!Ref HasSslCertificate, "true"]

Resources:
  # Security Groups
  
  # ALB Security Group
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from internet (redirect to HTTPS)
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub "bazar-alb-sg-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Bazar

  # ECS Fargate Service Security Group
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS Fargate service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSecurityGroup
          Description: HTTP from ALB
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound for external API calls
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16
          Description: PostgreSQL access to RDS
      Tags:
        - Key: Name
          Value: !Sub "bazar-ecs-sg-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Bazar



  # IAM Roles
  
  # ECS Task Execution Role
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "bazar-ecs-task-execution-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub "bazar-ecs-policy-${Environment}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::bazar-*-${Environment}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Bazar

  # ECS Task Role
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "bazar-ecs-task-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "bazar-ecs-task-policy-${Environment}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::bazar-*-${Environment}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Bazar





  # ECS Cluster
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "bazar-cluster-${Environment}"
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub "bazar-cluster-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Bazar

  # ECS Task Definition
  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "bazar-api-${Environment}"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: !Ref EcsCpu
      Memory: !Ref EcsMemory
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: bazar-api
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bazar-api:latest"
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: PORT
              Value: "80"
            - Name: DATABASE_URL
              Value: !Ref DatabaseUrl
            - Name: SUPABASE_URL
              Value: !Ref SupabaseUrl
            - Name: SUPABASE_KEY
              Value: !Ref SupabaseKey
            - Name: INIT_DB_ON_STARTUP
              Value: !Ref InitDbOnStartup
            - Name: INIT_AUTH_ON_STARTUP
              Value: !Ref InitAuthOnStartup
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:80/healthz || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Bazar

  # CloudWatch Log Group
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/bazar-api-${Environment}"
      RetentionInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Bazar

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "bazar-alb-${Environment}"
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "bazar-alb-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Bazar

  # ALB Target Group
  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "bazar-tg-${Environment}"
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthz
      HealthCheckPort: "80"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Bazar

  # ALB HTTPS Listener (Conditional)
  AlbHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasSslCertificate
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
        - CertificateArn: !Ref SslCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup

  # ALB HTTP Listener
  AlbHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup





  # ECS Service
  EcsService:
    Type: AWS::ECS::Service
    DependsOn: AlbHttpListener
    Properties:
      ServiceName: !Sub "bazar-api-service-${Environment}"
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref EcsTaskDefinition
      DesiredCount: !Ref EcsDesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PrivateAppSubnetId
      LoadBalancers:
        - ContainerName: bazar-api
          ContainerPort: 80
          TargetGroupArn: !Ref AlbTargetGroup
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Bazar

Outputs:
  EcsClusterName:
    Description: ECS Cluster Name
    Value: !Ref EcsCluster
    Export:
      Name: !Sub "${AWS::StackName}-EcsClusterName"

  EcsServiceName:
    Description: ECS Service Name
    Value: !Ref EcsService
    Export:
      Name: !Sub "${AWS::StackName}-EcsServiceName"

  AlbDnsName:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-AlbDnsName"

  AlbArn:
    Description: Application Load Balancer ARN
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub "${AWS::StackName}-AlbArn"

 